# Dockerfile per ambiente Java
FROM codercom/code-server:latest

USER root

# Installa OpenJDK 17 e strumenti di sviluppo
RUN apt-get update && apt-get install -y \
    openjdk-17-jdk \
    openjdk-17-jre \
    maven \
    gradle \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Configura JAVA_HOME
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV PATH=$PATH:$JAVA_HOME/bin

# Installa estensioni VS Code per Java
RUN code-server --install-extension redhat.java && \
    code-server --install-extension vscjava.vscode-java-debug && \
    code-server --install-extension vscjava.vscode-java-test && \
    code-server --install-extension vscjava.vscode-maven

USER coder

# Crea progetto di esempio con struttura Maven
WORKDIR /home/coder/project
RUN mkdir -p src/main/java/com/example && \
    mkdir -p src/test/java/com/example

RUN echo '<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    \n    <groupId>com.example</groupId>\n    <artifactId>java-environment</artifactId>\n    <version>1.0.0</version>\n    <packaging>jar</packaging>\n    \n    <properties>\n        <maven.compiler.source>17</maven.compiler.source>\n        <maven.compiler.target>17</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n    \n    <dependencies>\n        <!-- JSON processing -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>2.15.2</version>\n        </dependency>\n        \n        <!-- HTTP client -->\n        <dependency>\n            <groupId>org.apache.httpcomponents.client5</groupId>\n            <artifactId>httpclient5</artifactId>\n            <version>5.2.1</version>\n        </dependency>\n        \n        <!-- JUnit per testing -->\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter</artifactId>\n            <version>5.9.3</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    \n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n            </plugin>\n            \n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>3.1.2</version>\n            </plugin>\n            \n            <!-- Plugin per eseguire l'\''applicazione -->\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>exec-maven-plugin</artifactId>\n                <version>3.1.0</version>\n                <configuration>\n                    <mainClass>com.example.Main</mainClass>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>' > pom.xml

RUN echo 'package com.example;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        System.out.println("â˜• Hello Java!");\n        \n        // Informazioni sistema\n        System.out.println("Java Version: " + System.getProperty("java.version"));\n        System.out.println("Timestamp: " + LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));\n        \n        // Esempio di utilizzo classi\n        Calculator calc = new Calculator();\n        System.out.println("\\nðŸ§® Esempi Calculator:");\n        System.out.println("5 + 3 = " + calc.add(5, 3));\n        System.out.println("5 * 3 = " + calc.multiply(5, 3));\n        \n        try {\n            System.out.println("10 / 2 = " + calc.divide(10, 2));\n        } catch (ArithmeticException e) {\n            System.out.println("Errore: " + e.getMessage());\n        }\n        \n        // Esempio JSON\n        try {\n            ObjectMapper mapper = new ObjectMapper();\n            ObjectNode json = mapper.createObjectNode();\n            json.put("message", "Java Environment");\n            json.put("timestamp", LocalDateTime.now().toString());\n            json.put("status", "running");\n            \n            System.out.println("\\nðŸ“„ JSON Example:");\n            System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json));\n        } catch (Exception e) {\n            System.out.println("JSON Error: " + e.getMessage());\n        }\n        \n        // Esempio collezioni\n        List<String> languages = new ArrayList<>();\n        languages.add("Java");\n        languages.add("Python");\n        languages.add("JavaScript");\n        \n        System.out.println("\\nðŸ“‹ Programming Languages:");\n        languages.forEach(lang -> System.out.println("- " + lang));\n    }\n}' > src/main/java/com/example/Main.java

RUN echo 'package com.example;\n\npublic class Calculator {\n    \n    public int add(int a, int b) {\n        return a + b;\n    }\n    \n    public int multiply(int a, int b) {\n        return a * b;\n    }\n    \n    public double divide(double a, double b) {\n        if (b == 0) {\n            throw new ArithmeticException("Divisione per zero!");\n        }\n        return a / b;\n    }\n    \n    public long factorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException("Il numero deve essere non negativo");\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        \n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}' > src/main/java/com/example/Calculator.java

RUN echo 'package com.example;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CalculatorTest {\n    \n    private Calculator calculator;\n    \n    @BeforeEach\n    void setUp() {\n        calculator = new Calculator();\n    }\n    \n    @Test\n    void testAdd() {\n        assertEquals(8, calculator.add(5, 3));\n        assertEquals(0, calculator.add(-5, 5));\n    }\n    \n    @Test\n    void testMultiply() {\n        assertEquals(15, calculator.multiply(5, 3));\n        assertEquals(0, calculator.multiply(0, 5));\n    }\n    \n    @Test\n    void testDivide() {\n        assertEquals(2.0, calculator.divide(10, 5), 0.001);\n        assertThrows(ArithmeticException.class, () -> calculator.divide(10, 0));\n    }\n    \n    @Test\n    void testFactorial() {\n        assertEquals(1, calculator.factorial(0));\n        assertEquals(1, calculator.factorial(1));\n        assertEquals(120, calculator.factorial(5));\n        assertThrows(IllegalArgumentException.class, () -> calculator.factorial(-1));\n    }\n}' > src/test/java/com/example/CalculatorTest.java

RUN echo '# Java Environment â˜•\n\n## Come compilare ed eseguire\n\n### Using Maven (raccomandato)\n```bash\n# Compila il progetto\nmvn compile\n\n# Esegui l'\''applicazione\nmvn exec:java\n\n# Esegui i test\nmvn test\n\n# Crea JAR eseguibile\nmvn package\n\n# Pulisci build artifacts\nmvn clean\n```\n\n### Compilazione diretta\n```bash\n# Compila\njavac -cp ".:target/dependency/*" src/main/java/com/example/*.java -d target/classes\n\n# Esegui\njava -cp "target/classes:target/dependency/*" com.example.Main\n```\n\n## Struttura progetto (Maven Standard)\n```\nsrc/\nâ”œâ”€â”€ main/\nâ”‚   â””â”€â”€ java/\nâ”‚       â””â”€â”€ com/\nâ”‚           â””â”€â”€ example/\nâ”‚               â”œâ”€â”€ Main.java\nâ”‚               â””â”€â”€ Calculator.java\nâ””â”€â”€ test/\n    â””â”€â”€ java/\n        â””â”€â”€ com/\n            â””â”€â”€ example/\n                â””â”€â”€ CalculatorTest.java\npom.xml\nREADME.md\n```\n\n## Dipendenze incluse\n- **Jackson** - Processamento JSON\n- **Apache HttpClient 5** - Client HTTP\n- **JUnit 5** - Framework di testing\n\n## Estensioni VS Code installate\n- Java Extension Pack\n- Java Debug Support\n- Java Test Runner\n- Maven for Java\n\n## Comandi utili\n\n### Maven goals comuni\n- `mvn compile` - Compila il codice sorgente\n- `mvn test` - Esegue tutti i test\n- `mvn package` - Crea JAR\n- `mvn clean install` - Clean + compile + test + package\n- `mvn dependency:tree` - Mostra albero dipendenze\n\n### Java tools\n- `java -version` - Versione Java\n- `javac -version` - Versione compiler\n- `mvn -version` - Versione Maven\n\n## Debug in VS Code\n1. Imposta breakpoint cliccando a sinistra del numero di riga\n2. Premi F5 o usa "Run and Debug"\n3. Seleziona "Java" come environment\n\n## Testing\nI test sono scritti con JUnit 5. Esegui con:\n```bash\nmvn test\n```\n\nOppure usa l'\''integrazione VS Code per eseguire test individuali.' > README.md

EXPOSE 8080
CMD ["--auth", "none", "--bind-addr", "0.0.0.0:8080"]
